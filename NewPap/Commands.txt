from django.contrib.auth.models import User
from news. models import *

1.Создать двух пользователей (с помощью метода User.objects.create_user).
    1,u1 = User.objects.create(username = 'User 1')
    2.u2 = User.objects.create(username = 'User 2')

2.Создать два объекта модели Author, связанные с пользователями.
    1.Author.objects.create(author = u1)
    2.Author.objects.create(author = u2)

 3.Добавить 4 категории в модель Category
    1.Category.objects.create(nameCategory = 'Music')
    2.Category.objects.create(nameCategory = 'Culture')
    3.Category.objects.create(nameCategory = 'Society')
    4.Category.objects.create(nameCategory = 'Playbill')

 4.Добавить 2 статьи и 1 новость.
    1.auth1 = Author.objects.get(id=1)
	2.auth2 = Author.objects.get(id=2)
	3.Post.objects.create(postAuthor=auth1 , postType='AR' , postTitle='Lorem ipsum dolor sit amet.', postText='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore disputandum putant. Sed.')
	4.Post.objects.create(postAuthor=auth2 , postType='AR' , postTitle='Lorem ipsum dolor sit amet.', postText='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore disputandum putant. Sed.')
	5.Post.objects.create(postAuthor=auth1 , postType='NW' , postTitle='Lorem ipsum dolor sit amet.', postText='Lorem ipsum dolor sit amet, consectetur adipiscing elit.')
	6.Post.objects.get(id=2).preview()

5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
    1.Post.objects.get(id=1).postCtg.add(Category.objects.get(id=4))
    2.Post.objects.get(id=1).postCtg.add(Category.objects.get(id=3))
    3.Post.objects.get(id=2).postCtg.add(Category.objects.get(id=2))
    4.Post.objects.get(id=2).postCtg.add(Category.objects.get(id=1))
    5.Post.objects.get(id=3).postCtg.add(Category.objects.get(id=3))
    6.Post.objects.get(id=3).postCtg.add(Category.objects.get(id=2))

6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
    1.Comment.objects.create(commPost=Post.objects.get(id=1), commUser=Author.objects.get(id=1).author, commText='comment on the policy in the first article from author 1')
    2.Comment.objects.create(commPost=Post.objects.get(id=1), commUser=Author.objects.get(id=2).author, commText='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore disputandum putant. Sed.')
    3.Comment.objects.create(commPost=Post.objects.get(id=2), commUser=Author.objects.get(id=1).author, commText='Superpost!!!!')
    4.Comment.objects.create(commPost=Post.objects.get(id=3), commUser=Author.objects.get(id=2).author, commText='Superpost!!!! Avesome!!')

7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов
    1.Post.objects.get(id=2).like()
    2.Post.objects.get(id=3).like()
    3.Post.objects.get(id=1).dislike()

    4.Comment.objects.get(id=1).dislike()
    5.Comment.objects.get(id=2).like()
    6.Comment.objects.get(id=3).dislike()
    7.Comment.objects.get(id=4).like()
    8.commRunk


8.Обновить рейтинги пользователей.
    1.Author.objects.get(author=User.objects.get(username = 'User1')).update_rating()
    2.Author.objects.get(author=User.objects.get(username = 'User2')).update_rating()

9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
    1. s = Author.objects.order_by('authorRunk')
    2.for i in s: i.authorRunk, i.author.username

 10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
 основываясь на лайках/дислайках к этой статье.
    1.p = Post.objects.order_by('-postRunk')
    2.for i in p[:1]:i.postCraTime, i.postAuthor, i.postRunk, i.postTitle, i.preview()

11.Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
    1p[2].comment_set.values('commCreaTime', 'commUser', 'commRunk', 'commText')







